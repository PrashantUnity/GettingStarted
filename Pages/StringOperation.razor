@page "/TransformString"
<style>
    #codeBlock {
        border: 1px solid #1B1A17;
        padding: 10px;
        margin: 10px 0;
        position: relative;
    }

    #copyButton {
        position: absolute;
        top: 0;
        right: 0;
        padding: 0px 0px;
        cursor: pointer; 
        background-color: transparent;
    }
</style>
 <MudPaper Class="ma-6" Elevation="0">
<MudGrid >
    <MudItem xs=12 sm=6>
            <MudPaper Class="d-flex justify-center object-fill " Elevation="0"> 
            <MudTextField AutoGrow=true @bind-Value="@Value"   Label="Input Text Here" T="string"/>
        </MudPaper>
    </MudItem>
    @if(duplicateSelection)
    {
        <MudItem xs=12 sm=6>
            <MudPaper Class="d-flex justify-center object-fill " Elevation="0">
                <MudNumericField @bind-Value="@times"   Label="Times" T="int" Min="1" />
            </MudPaper>
        </MudItem>
    }
       
    <MudItem xs=12 sm=6>
        <MudSelect @bind-Value="enumValue"
                   Label="Operation Type" 
                   OpenIcon="@Icons.Material.Filled.Settings"
                   AdornmentColor="Color.Secondary">
        @foreach (var item in ls)
        {
            <MudSelectItem Value="@item" >@item.ToString()</MudSelectItem>
        }
        </MudSelect>
    </MudItem>
    <MudItem xs=12> 
        <MudButton 
            Variant="Variant.Filled" 
            FullWidth="true"
            StartIcon="@Icons.Material.Filled.AutoAwesome"
            Color="Color.Secondary"
            OnClick="Transform">Transform</MudButton>
    </MudItem>
    @if (operatedListOfString != null)
    {
        <MudItem xs=12>
            <MudPaper> 
                <div id="codeBlock">
                     <MudPaper id="paintImage" Class="d-flex flex-wrap justify-center ma-6 mb-6" Height="100" Elevation="0">
                        @foreach (var item in operatedListOfString)
                        {
                                <MudPaper Height="30px" Class="d-flex pa-2 ma-6 align-content-center">
                                @item
                            </MudPaper>
                        }
                    </MudPaper>
                    <div id="copyButton" class="ma-6">
                        <CopyCode CodeText="@finalResult" />
                    </div>
                </div>
            </MudPaper>
        </MudItem>
    }

</MudGrid>
 </MudPaper>
@code {
    public string Value { get; set; } = "C Sharp, Python, C Plus Plus";
    public string enumValue { get; set; } = "Select Option";
    string finalResult;
    bool duplicateSelection = false;
    int times = 2;

    List<string> operatedListOfString;
    List<string> ls = new List<string>()
        {
            "To Upper",
            "To Lower",
            "To Array",
            "All Substring",
            "Duplicate"
        }; 
    void Reset()
    {
        duplicateSelection = false; 
    }
    void Transform()
    {
        switch (enumValue)
        {
            case "To Upper":
                Reset();
                ToUpper();
                break;
            case "To Lower":
                Reset();
                ToLower();
                break;
            case "To Array":
                Reset();
                ToArray();
                break;
            case "All Substring":
                Reset();
                AllSubString();
                break;
            case "Duplicate":
                duplicateSelection = true;
                StateHasChanged();
                Duplicate(); 
                break;
        }
    }
    List<string> ToListConverter(string str)
    {
        return str.Trim().Split(new char[] { ',', '|', '[', ']', '{', '}', '!', '@', '#', '$', '%' }).ToList();
    }
    void ToUpper()
    {
        finalResult = Value.ToUpper(); 
        operatedListOfString = ToListConverter(finalResult);
        StateHasChanged();
    }
    void ToLower()
    {
        finalResult = Value.ToLower(); 
        operatedListOfString = ToListConverter(finalResult);
        StateHasChanged(); 
    }
    void ToArray()
    {
        var ls = ToListConverter(Value);

        finalResult = string.Join(',', ls);
        operatedListOfString = ls;
        StateHasChanged();
    }
    void AllSubString()
    {
        if(Value.Length>50)
        {
            finalResult = "Why In the World You Want to Print Substring of this";
            operatedListOfString = new();
            operatedListOfString.Add(finalResult);
            return;
        }
        operatedListOfString = new();
        for (int i = 0; i < Value.Length; i++)
        {
            for (int j = i+1; j <= Value.Length; j++)
            {
                operatedListOfString.Add(Value.Substring(i, j - i));
            }
        }
        finalResult = string.Join('\n', operatedListOfString);
        StateHasChanged();
    }
    void Decode()
    {

    }
    void Encode()
    {

    }
    void Duplicate()
    {
        operatedListOfString = new();
        for (int i = 0; i < times; i++)
        {
            operatedListOfString.Add(Value);
        }
        finalResult = string.Join('\n', operatedListOfString);
        StateHasChanged();
    }

}