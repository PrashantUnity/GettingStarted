@page "/PixelPaint"
<PageTitle>Pixel Painter</PageTitle>
<MudPaper Class="ma-6"> 
    <MudGrid Spacing="3" Justify="Justify.Center">
        <MudItem xs="12" sm="4" md="3" lg="2">
            <MudPaper Height="60px" Class="mx-6">
                <MudText Class="d-flex align-center justify-center mud-width-full px-8">
                   Count:@size.ToString()
                </MudText>
                <MudSlider @bind-Value="@size" Min="1" Max="1000" Step="1" @onchange="ReGenerate"
                           Class="d-flex align-center justify-center mud-width-full px-8 " />
            </MudPaper> 
        </MudItem>
        <MudItem xs="12" sm="4" md="3" lg="2">
            <MudPaper Height="60px" Class="mx-6">
                <MudText Class="d-flex align-center justify-center mud-width-full px-8">Size :@pixelSize.ToString()
                </MudText>
                <MudSlider @bind-Value="@pixelSize" Min="24" Max="100" Step="1" @onchange="ReGenerate"
                           Class="d-flex align-center justify-center mud-width-full px-8 "></MudSlider>
            </MudPaper>
                
        </MudItem>
        <MudItem xs="12" sm="4" md="3" lg="2">
            <MudPaper Height="60px" Class="mx-6">
                <MudColorPicker DisableToolbar="false" DisableAlpha="false" DisableColorField="false" DisablePreview="false" DisableSliders="false" DisableInputs="false" DisableModeSwitch="false" ColorPickerMode="ColorPickerMode" PickerVariant="PickerVariant.Dialog"
                                Class="d-flex align-center justify-center mud-width-full px-8 "
                @bind-Text="brushcolor" /> 
            </MudPaper>
        </MudItem>
        <MudItem xs="6" sm="3" md="2" xxl="1">
            <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.FormatPaint"
                        Class="d-flex align-center justify-center mud-width-full" OnClick="Eraser" Label="Eraser" />
        </MudItem> 
        <MudItem xs="6" sm="3" md="2" xxl="1">
            @if(encryptionIcon)
            {
        
                <MudFab Color=@encryptionColor StartIcon="@Icons.Material.Filled.LockOpen"
                        Class="d-flex align-center justify-center mud-width-full" OnClick="Scramble" Label=@label />
            }
            @if(!encryptionIcon)
            { 
                <MudFab Color=@encryptionColor StartIcon="@Icons.Material.Filled.Lock"
                        Class="d-flex align-center justify-center mud-width-full" OnClick="Scramble" Label=@label />
            
            }
        </MudItem>

    </MudGrid>
</MudPaper>
@if (canvass.Count > 0)
{
    <MudPaper Class="d-flex flex-wrap justify-center ma-6" MaxWidth="100" MinHeight="100" Elevation="0">
        @foreach (var data in canvass)
        {  
            <div style="height:@(pixelSize)px; width: @(pixelSize)px; background-color:@(data.CellColor); margin: 1px; border-width:2px; border-color:@(BoderColor);"
                    @onclick="@(()=>ChoraTouchKartaHy(data))"
                    @onmouseenter="@(()=>MouseEnter(data))"
                    @onmouseout="@(()=>MouseExit(data))"
                    @onmousemove="@((e) => Dragging(e, data))">
                </div> 
        } 
    </MudPaper> 
}
@code {
    public ColorPickerMode ColorPickerMode { get; set; }
    List<PaintCellModel> canvass = new();

    string CellColor = "white";
    string BoderColor = "green";
    string brushcolor = "red";
    bool encryptionIcon = false;

    Color encryptionColor = Color.Success;
    int pixelSize = 64;

    int size = 10;

    string label = "Encrypt";
    List<PaintCellModel> canvassOriginal;

    protected override async Task OnInitializedAsync()
    {
        ReGenerate();
        StateHasChanged();
    }
    void ReGenerate()
    {
        canvass = new();
        for (int i = 0; i < Math.Sqrt(size); i++)
        { 
            for (int j = 0; j < Math.Sqrt(size); j++)
            {
                var temp = new PaintCellModel()
                    {
                        XAxis = i,
                        YAxis = j,
                        CellColor = "white"
                    };
                canvass.Add(temp);
            } 
        }
        StateHasChanged();
    }
    void ChoraTouchKartaHy(PaintCellModel cell)
    {
        cell.CellColor = brushcolor;
        cell.PreviousCellColor = brushcolor;
        StateHasChanged();
    }
    void MouseEnter(PaintCellModel cell)
    {
        cell.PreviousCellColor = cell.CellColor;
        cell.CellColor = brushcolor;
        StateHasChanged();
    }
    void MouseExit(PaintCellModel cell)
    { 
        cell.CellColor = cell.PreviousCellColor; 
        StateHasChanged();
    }
    void Dragging(MouseEventArgs e, PaintCellModel cell)
    {
        if (e.Buttons==1)
        { 
            cell.CellColor = brushcolor;
            cell.PreviousCellColor = brushcolor; 
            StateHasChanged();
        }
    }
    void Eraser()
    {
        brushcolor = "white";
    }
    void Scramble()
    {
        if (label == "Encrypt")
        {
            label = "Decrypt";
            canvassOriginal = canvass;
            var random = new Random();
            encryptionColor = Color.Error;
            encryptionIcon = true;
            canvass = SuffeledArray(new List<PaintCellModel> (canvass), random.Next(1, 100000));
            StateHasChanged();
        }
        else
        {
            label = "Encrypt";
            canvass = canvassOriginal;
            encryptionColor = Color.Success;
            encryptionIcon = false;
            StateHasChanged();
        }


    }
    public static List<T> SuffeledArray<T>(List<T> array, int seed)
    {
        var rand = new Random(seed); 
        for (int i = 0; i < array.Count; i++)
        {
            var randIndex = rand.Next(i, array.Count);
            var tempItem = array[randIndex];
            array[randIndex] = array[i];
            array[i] = tempItem;
        }
        return array;
    }
}
