@page "/graph"
<PageTitle>Path Finder</PageTitle>

<MudPaper Class="ma-6"> 
    <MudGrid Spacing="3" Justify="Justify.Center">
        <MudItem xs="12" sm="6" md="4"  >
            <MudPaper Height="60px" Class="mx-6">
                <MudText Class="d-flex align-center justify-center mud-width-full px-8">
                    Row:@horizontal.ToString()
                </MudText>
                <MudSlider @bind-Value="@horizontal" Min="5" Max="101" Step="2" @onchange="ReGenerate" Disabled="@isSorting"
                           Size="Size.Large"
                           Color="Color.Info"
                           Class="d-flex align-center justify-center mud-width-full px-8 " />
            </MudPaper> 
        </MudItem>
        <MudItem xs="12" sm="6" md="4"  >
            <MudPaper Height="60px" Class="mx-6">
                <MudText Class="d-flex align-center justify-center mud-width-full px-8">
                    Column:@vertical.ToString()
                </MudText>
                <MudSlider @bind-Value="@vertical" Min="5" Max="101" Step="2" @onchange="ReGenerate" Disabled="@isSorting"
                           Size="Size.Large"
                           Color="Color.Info"
                           Class="d-flex align-center justify-center mud-width-full px-8 " />
            </MudPaper> 
        </MudItem>
        <MudItem xs="12" sm="6" md="4" >
            <MudPaper Height="60px" Class="mx-6">
                <MudText Class="d-flex align-center justify-center mud-width-full px-8">
                    Delay:@sleep.ToString()
                </MudText>
                <MudSlider @bind-Value="@sleep" Min="1" Max="1000"
                           Size="Size.Large"
                           Color="Color.Info"
                           Class="d-flex align-center justify-center mud-width-full px-8 " />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Height="60px" Class="mx-6">
                <MudText Class="d-flex align-center justify-center mud-width-full px-8">
                    Margin:@margin.ToString()
                </MudText>
                <MudSlider @bind-Value="@margin" Min="1" Max="10"
                           Size="Size.Large"
                           Color="Color.Info"
                           @onchange="ReGenerate"
                           Class="d-flex align-center justify-center mud-width-full px-8 " />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Height="60px" Class="mx-6">
                <MudText Class="d-flex align-center justify-center mud-width-full px-8">
                    Boder:@boderWidth.ToString()
                </MudText>
                <MudSlider @bind-Value="@boderWidth" Min="0" Max="20"
                           Size="Size.Large"
                           Color="Color.Info"
                           @onchange="ReGenerate"
                           Class="d-flex align-center justify-center mud-width-full px-8 " />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Height="84px" Class="mx-6"> 
                <MudColorPicker DisableToolbar="false" DisableAlpha="false" DisableColorField="false" DisablePreview="false" DisableSliders="false" DisableInputs="false" DisableModeSwitch="false" ColorPickerMode="ColorPickerMode.HEX" PickerVariant="PickerVariant.Dialog"
                                @onchange="ReGenerate"
                                Class="d-flex align-center justify-center mud-width-full px-8 "
                                @bind-Text="boderColor" />
            </MudPaper>
        </MudItem>
        <MudCheckBox @bind-Checked="@perfect" Color="Color.Primary"> Perfect Maze</MudCheckBox>
        <MudItem xs="12" sm="6" md="2"  >
            <MudButton
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                FullWidth="true" 
                OnClick="BFS" 
                Disabled="@isSorting"
                Class="align-center justify-center object-fill ">
                B F S 
            </MudButton>
        </MudItem>
        <MudItem xs="12" sm="6" md="2"  >
            <MudButton 
                Variant="Variant.Filled" 
                Color="Color.Error" 
                FullWidth="true" 
                OnClick="Reset" 
                Disabled="@isSorting"
                Class="align-center justify-center object-fill ">
                Reset
            </MudButton>
        </MudItem>
        <MudItem xs="12" sm="6" md="2">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Secondary"
                       FullWidth="true"
                       OnClick="ReGenerate"
                       Disabled="@isSorting"
                       Class="align-center justify-center object-fill ">
                Rgenerate
            </MudButton>
        </MudItem>
    </MudGrid>
</MudPaper> 
@if (graph.Count > 0)
{ 
    <MudPaper Class="d-flex flex-wrap justify-center ma-6" Height="100" >
        <MudPaper Class="d-flex flex-column flex-grow-1 gap-0">  
                    @foreach (var item in graph)
                    {
                        <MudPaper Class="d-flex flex-row flex-grow-1 gap-0" Elevation="0">
                            @foreach (var data in item)
                            {
                                <GraphCell BackgroundColorData="@data" OnEmployeeSelection="UpdateGraphData" />
                            }
                        </MudPaper>
                    } 
        </MudPaper> 
    </MudPaper>  
}

@* @if (graph.Count > 0)
{
    <MudPaper Class="ma-6 pa-6">
        <table class="overflow-auto" style="margin: 8px auto; border-color:black; border-width:thick">
            @foreach (var item in graph)
            {
                <tr>
                    @foreach (var data in item)
                    {
                        <GraphCell BackgroundColorData="@data" OnEmployeeSelection="UpdateGraphData" />
                    }
                </tr>
            }
        </table>
    </MudPaper>
} *@
@code {

    List<List<GraphCellModels>> graph = new();
    int horizontal = 7;
    int vertical = 7;
    int sleep = 10;
    int margin = 1;
    int boderWidth = 1;
    string boderColor = "green";
    Random random = new Random();
    GraphCellModels start;
    GraphCellModels end;
    int count = 0;
    bool isSorting = false;
    bool perfect = false;


    protected override async Task OnInitializedAsync()
    {
        ReGenerate();
        StateHasChanged();
    }

    protected void UpdateGraphData(GraphCellModels models)
    {
        if (count >= 2) return;
        if (start != null && models.XAxis == start.XAxis && models.YAxis == start.YAxis) return;
        if (models.CellColor == "black") return;
        if (start is null)
        {
            models.CellColor = "green";
            start = models;
        }
        else
        {
            models.CellColor = "blue";
            end = models;
        }
        count++;
        StateHasChanged();
    }
    public void Reset()
    {
        start = null;
        end = null;
        count = 0; 
        isSorting = false;
        foreach (var item in graph)
        {
            foreach (var data in item)
            {
                if (data.CellColor == "yellow" || data.CellColor == "green" || data.CellColor == "blue" || data.CellColor == "red")
                {
                    data.CellColor = "white";
                }
            }
        }
        StateHasChanged();
    }
    public async void BFS()
    {
        isSorting = true;
        if (count <= 1 || start is null || end is null)
        {
            isSorting = false;
            return;
        }

        bool[,] visited = new bool[horizontal, vertical];

        var queue = new Queue<GraphCellModels>();

        queue.Enqueue(start);
        var current = start;
        visited[start.XAxis, start.YAxis] = true;
        var neighbour = new List<(int, int)>
        {
            (-1,0),
            (1,0),
            (0,1),
            (0,-1)
        };
        bool destinationFound = false;
        while (queue.Count > 0)
        {
            current = queue.Dequeue();

            foreach (var item in neighbour)
            {
                var x = current.XAxis + item.Item1;
                var y = current.YAxis + item.Item2;
                if (x >= 0 && y >= 0
                    && x < horizontal && y < vertical
                    && !visited[x, y] && graph[x][y].CellColor != "black")
                {

                    if (graph[x][y].CellColor == "blue")
                    {
                        destinationFound = true;
                        queue.Clear();
                        break;
                    }
                    if (graph[x][y].CellColor != "green")
                        graph[x][y].CellColor = "yellow";
                    visited[x, y] = true;
                    graph[x][y].Parent = current;
                    queue.Enqueue(graph[x][y]);
                    StateHasChanged();
                    await Task.Delay(sleep);
                }
            }
        }

        if (!destinationFound)
        { 
            start = null;
            end = null; 
            isSorting = false;
            StateHasChanged();
            return;
        }
        var parentTrace = new HashSet<GraphCellModels>();
        while (current.Parent != null && parentTrace.Add(current))
        {

            current.CellColor = "red";
            current = current.Parent;
            StateHasChanged();
            await Task.Delay(sleep);
            if (current == start) break;
        }
        start = null;
        end = null; 
        isSorting = false;
        StateHasChanged();
    } 
    void ReGenerate()
    {
        var maze = (new MazeAlgorithm()).GenerateMaze(horizontal, vertical);

        isSorting = false;
        graph.Clear();
        for (int i = 0; i < horizontal; i++)
        {
            var ls = new List<GraphCellModels>();
            for (int j = 0; j < vertical; j++)
            {
                var cellChora = new GraphCellModels()
                    {
                        XAxis = i,
                        YAxis = j,
                        BoderWidth =boderWidth,
                        Margin=margin,
                        BoderColor = boderColor
                    };
                if (perfect && maze[i, j] == 1)
                {
                    cellChora.CellColor = "black";
                }
                else if (!perfect &&  random.Next(1, 100) > 80) cellChora.CellColor = "black";
                else cellChora.CellColor = "white";
                ls.Add(cellChora);
            }
            graph.Add(ls);
        } 
        start = null;
        end = null;
        count = 0; 
        StateHasChanged();
    }
}
