@inject IJSRuntime JSRuntime
<pre class="line-numbers">
<code class="language-rust">trait Shape {
    // Method to calculate area
    fn calculate_area(&self) -> f64;

    // Method to get the shape's name
    fn name(&self) -> &str;
}

// Implement the Shape trait for a struct
struct Circle {
    radius: f64,
}

impl Circle {
    // Constructor
    fn new(radius: f64) -> Self {
        Circle { radius }
    }
}

impl Shape for Circle {
    // Implement calculate_area method from the Shape trait
    fn calculate_area(&self) -> f64 {
        std::f64::consts::PI * self.radius.powi(2)
    }

    // Implement name method from the Shape trait
    fn name(&self) -> &str {
        "Circle"
    }
}

fn main() {
    // Using the implemented trait
    let circle = Circle::new(5.0);
    println!("Area of the {} is: {}", circle.name(), circle.calculate_area());
}
</code>
</pre>


@code {
    // Inside a .razor file or a separate class
    @inject IJSRuntime JSRuntime


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializePrism");
        }
    }

}
