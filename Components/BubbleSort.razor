@page "/BubbleSort"
@inject IJSRuntime _js
<PageTitle>Sorting</PageTitle>
<style>
    .bar {
        display: inline-block;
        background-color: green;
    }
</style>

<MudPaper Class="ma-6">
    <MudGrid Spacing="3" Justify="Justify.Center">
         
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudPaper Height="60px" Class="mx-6">
                <MudText Class="d-flex align-center justify-center mud-width-full px-8">
                    Count: @value.ToString()
                </MudText>
                <MudSlider @bind-Value="@value" Min="10" Max="250" @onchange="ReGenerate" Disabled="@isSorting"
                           Size="Size.Large"
                           Color="Color.Primary"
                           Class="d-flex align-center justify-center mud-width-full px-8 " />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudPaper Height="60px" Class="mx-6">
                <MudText Class="d-flex align-center justify-center mud-width-full px-8">
                    Delay: @sleep.ToString()
                </MudText>
                <MudSlider @bind-Value="@sleep" Min="1" Max="1000"
                           Size="Size.Large"
                           Color="Color.Error"
                           Class="d-flex align-center justify-center mud-width-full px-8 " />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudPaper Height="60px" Class="mx-6">
                <MudText Class="d-flex align-center justify-center mud-width-full px-8">
                    Width: @width.ToString()
                </MudText>
                <MudSlider @bind-Value="@width" Min="1" Max="100"
                           Size="Size.Large"
                           Color="Color.Info"
                            Class="d-flex align-center justify-center mud-width-full px-8 " />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudPaper Height="60px" Class="mx-6">
                <MudText Class="d-flex align-center justify-center mud-width-full px-8">
                    Spacing: @margin.ToString()
                </MudText>
                <MudSlider @bind-Value="@margin" Min="1" Max="60"
                           Size="Size.Large"
                           Color="Color.Info"
                            Class="d-flex align-center justify-center mud-width-full px-8 " />
            </MudPaper>
        </MudItem> 
        <MudItem xs="12" sm="6" md="3" lg="2"> 
                <MudButton Variant="Variant.Filled"
                           Color="Color.Secondary"
                           OnClick="Generate"
                           Disabled="@isSorting"
                           FullWidth="true"
                           Class="align-center justify-center">
                    Generate
                </MudButton> 
        </MudItem>
        <MudItem xs="12" sm="6" md="3" lg="2"> 
                <MudButton Variant="Variant.Filled"
                           Color="Color.Success"
                           OnClick="Simulate"
                           FullWidth="true"
                           Disabled="@isSorting" 
                           Class="align-center justify-center object-fill ">
                    Sort
                </MudButton> 
        </MudItem>
    </MudGrid>
</MudPaper>

<MudPaper Class="ma-6 pa-6">
    @if (data.Count >= 1)
    {
        foreach (var item in data)
        {
            if (change.Item1 == item.Item1 ||
            change.Item1 == item.Item2 ||
            change.Item2 == item.Item1 ||
            change.Item2 == item.Item2)
            {
                <div class="bar" style="height:@(item.Item1)px; width: @(width)px; background-color: red; margin-right: @(margin)px;" />
            }
            else
            {
                <div class="bar" style="height:@(item.Item1)px; width: @(width)px; margin-right: @(margin)px;"></div>
            }
        }
    }
</MudPaper>



@code {
    Random random = new Random();
    List<(int, int)> data = new();
    int width = 30;
    int margin = 1;
    int value = 35;
    int sleep = 10;
    (int, int) change = (-1, -1);
    bool isSorting = false;
    async void Simulate()
    {
        isSorting = true;
        for (int i = 0; i < data.Count; i++)
        {
            for (int j = i + 1; j < data.Count; j++)
            {
                if (data[j].Item1 < data[i].Item1)
                {

                    change = (data[j].Item2, data[i].Item2);
                    (data[i], data[j]) = ((data[j].Item1, data[j].Item2), (data[i].Item1, data[i].Item2));
                    StateHasChanged();
                    await Task.Delay(sleep);
                }
            }
        }
        change = (-1, -1);
        isSorting = false;
        StateHasChanged();
    }

    void Generate()
    {
        data = new();
        int i = 0;
        while (i < value)
        {
            data.Add((random.Next(1, 200), i));
            i++;
        }
        StateHasChanged();
    }
    void ReGenerate()
    {
        Generate();
        if (isSorting)
            Simulate();
    }

}
